#pragma once

#include <vulkan/vulkan.h>

// New assertion macro
#define ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, valid_access, valid_usages) if (access & valid_access) CORE_ASSERT(usage & valid_usages, "[VULKAN/SYSTEM] Invalid access mask for this resource's usage");
#define ASSERT_IMAGE_ASPECT_FOR_IMAGE_LAYOUT(layout, aspect, valid_layout, valid_aspect) if (layout == valid_layout) CORE_ASSERT(aspect & valid_aspect, "[VULKAN/SYSTEM] Invalid layout for this image's color aspect");

namespace vkren
{

  namespace Debug
  {

    static void AccessMaskToBufferUsageCheck(const VkBufferUsageFlags& usage, const VkAccessFlags& access)
    {
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_INDIRECT_COMMAND_READ_BIT, VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_INDEX_READ_BIT, VK_BUFFER_USAGE_INDEX_BUFFER_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT, VK_BUFFER_USAGE_VERTEX_BUFFER_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_UNIFORM_READ_BIT, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_SHADER_READ_BIT, VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT | VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT | VK_BUFFER_USAGE_STORAGE_BUFFER_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_SHADER_WRITE_BIT, VK_BUFFER_USAGE_STORAGE_BUFFER_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_TRANSFER_READ_BIT, VK_BUFFER_USAGE_TRANSFER_SRC_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_TRANSFER_WRITE_BIT, VK_BUFFER_USAGE_TRANSFER_DST_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT, VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT, VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT, VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT, VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR, VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR, VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR);
    }

    static void ImageLayoutToAspectCheck(const VkImageLayout& layout, const VkImageAspectFlags& aspect)
    {
      ASSERT_IMAGE_ASPECT_FOR_IMAGE_LAYOUT(layout, aspect, VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, VK_IMAGE_ASPECT_COLOR_BIT);
      ASSERT_IMAGE_ASPECT_FOR_IMAGE_LAYOUT(layout, aspect, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT);
    }

    static void AccessMaskToImageUsageCheck(const VkImageUsageFlags& usage, const VkAccessFlags& access)
    {
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_SHADER_READ_BIT, VK_IMAGE_USAGE_SAMPLED_BIT | VK_IMAGE_USAGE_STORAGE_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_SHADER_WRITE_BIT, VK_IMAGE_USAGE_STORAGE_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_COLOR_ATTACHMENT_READ_BIT, VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT, VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_TRANSFER_READ_BIT, VK_IMAGE_USAGE_TRANSFER_SRC_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_TRANSFER_WRITE_BIT, VK_IMAGE_USAGE_TRANSFER_DST_BIT);
      ASSERT_ACCESS_MASK_FOR_RESOURCE_USAGE(access, usage, VK_ACCESS_INPUT_ATTACHMENT_READ_BIT, VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT);
    }

  }

}
